# Generated by Selenium IDE
import pytest
import datetime
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

options = webdriver.ChromeOptions()
options.add_argument('--ignore-certificate-errors')
options.add_argument("--test-type")
options.chromedriver = "/usr/bin/chromedriver"
driver = webdriver.Chrome(options=options)
driver.implicitly_wait(1)

class Test():
	def setup_method(self, method):
		options = webdriver.ChromeOptions()
		options.add_argument('--ignore-certificate-errors')
		options.add_argument("--test-type")
		options.chromedriver = "/usr/bin/chromedriver"
		self.driver = webdriver.Chrome()
		self.vars = {}
  
	def teardown_method(self, method):
		self.driver.quit()
  
	def test_stainless_work_table(self):
		driver.get("https://www.webstaurantstore.com/")
		driver.find_element(By.ID, "searchval").click()
		driver.find_element(By.ID, "searchval").send_keys("stainless work table")
		driver.find_element(By.CSS_SELECTOR, ".banner-search-btn").click()
		testing = True
		page = 1
		errors = 0
		results = 0
		while testing == True:
#this next line assumes there will always be 60 max results per page! lines 77-91 also assume this to be true.
			for i in range(1,61):
				wait = WebDriverWait(driver, 10)
				first = driver.find_element(By.CSS_SELECTOR, f"#productBox1 > .details > .description").text
				try:
					element = wait.until(expected_conditions.element_to_be_clickable((By.XPATH, f"//div[@id=\'productBox{i}\']")))
					name = driver.find_element(By.CSS_SELECTOR, f"#productBox{i} > .details > .description").text
					print(f"Page {page} Item {i} --- {name}")
					results += 1
					namesplit = name.split()
					if 'Table' not in namesplit:
						print(f"\n\n\n'Table' not in title: {name}\n\n\n")
						errors += 1
				except:
					print('element not found, add previous element to cart')
					element = wait.until(expected_conditions.element_to_be_clickable((By.XPATH, f"//div[@id=\'productBox{(i-1)}\']")))
					final = driver.find_element(By.CSS_SELECTOR, f"#productBox{i-1} > .details > .description").text
					driver.find_element(By.CSS_SELECTOR, f"#productBox{i-1} > .details > .description").click()
					element = wait.until(expected_conditions.element_to_be_clickable((By.ID, "buyButton")))
					driver.find_element(By.ID, "buyButton").click()
					element = wait.until(expected_conditions.element_to_be_clickable((By.ID, "cartItemCountSpan")))
					driver.find_element(By.ID, "cartItemCountSpan").click()
					element = wait.until(expected_conditions.element_to_be_clickable((By.XPATH, "//a[contains(.,'Empty Cart')]")))
					driver.find_element(By.XPATH, "//a[contains(.,'Empty Cart')]").click()
					element = wait.until(expected_conditions.element_to_be_clickable((By.XPATH, "//button[contains(.,'Empty Cart')]")))
					driver.find_element(By.XPATH, "//button[contains(.,'Empty Cart')]").click()
					testing = False
					break
			try:
				driver.find_element(By.CSS_SELECTOR, ".icon-right-open").click()
				print("going to next page")
				page += 1
			except:
				break
			# this next part covers the case where the number of results is divisible by 60
			if first == driver.find_element(By.CSS_SELECTOR, f"#productBox1 > .details > .description").text:
				print('Results are divisible by 60 and this is the last page. Return number 60.')
				element = wait.until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, f"#productBox60 > .details > .description")))
				final = driver.find_element(By.CSS_SELECTOR, f"#productBox60 > .details > .description").text
				driver.find_element(By.CSS_SELECTOR, f"#productBox60 > .details > .description").click()
				element = wait.until(expected_conditions.element_to_be_clickable((By.ID, "buyButton")))
				driver.find_element(By.ID, "buyButton").click()
				element = wait.until(expected_conditions.element_to_be_clickable((By.ID, "cartItemCountSpan")))
				driver.find_element(By.ID, "cartItemCountSpan").click()
				element = wait.until(expected_conditions.element_to_be_clickable((By.XPATH, "//a[contains(.,'Empty Cart')]")))
				driver.find_element(By.XPATH, "//a[contains(.,'Empty Cart')]").click()
				element = wait.until(expected_conditions.element_to_be_clickable((By.XPATH, "//button[contains(.,'Empty Cart')]")))
				driver.find_element(By.XPATH, "//button[contains(.,'Empty Cart')]").click()
				testing = False
		print(f"{errors} errors in {results} items returned in search. Final result of {final} was added to and then removed from the cart successfully.")

do = Test()
do.test_stainless_work_table()
driver.quit()
